// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

enum UserRole {
    USER
    ADMIN
    DOCTOR
}

enum Status {
    PENDING
    APPROVED
    REJECTED
}

model VideoScript {
    id          String   @id @default(cuid())
    content     String   @db.Text
    userId      String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @default(now())
    reason      String?  @db.Text
    videoUrl    String?
    status      Status   @default(PENDING)
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String
    email         String   @unique
    emailVerified DateTime?
    hashedPassword String?
    role          UserRole  @default(DOCTOR)
    accounts      Account[]
    sessions      Session[]
    VideoScript   VideoScript[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Necessary for Prisma Checkpoint for the Chat Model

model ChatHistory {
    id          String @id @default(cuid())
    sessionId   String
    userId      String
    createdAt   DateTime @default(now())
    message     Json
    status      Boolean @default(true)
}